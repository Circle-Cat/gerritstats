#parse( "templates/macros.vm" )
<!DOCTYPE html>
<meta charset="utf-8">
<style>

.bar {
  fill: steelblue;
}

.bar:hover {
  fill: brown;
}

.axis {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}
</style>
<body>
<script src="res/d3.min.js"></script>
<head>
    <title>GerritStats: $identity.name ($identity.username)</title>
</head>

<h1>$identity.name ($identity.username)</h1>
<h2>$identity.email</h2>

<h3>Overall</h3>
<p>
Commits: $record.commits.size() <br>
Comments written: $record.allCommentsWritten.size() <br>
Comments received: $record.allCommentsReceived.size() <br>
Commit/comment ratio: $record.receivedCommentRatio <br>
Added as reviewer: $record.addedAsReviewerTo.size() <br><br>

Review comment ratio: $record.reviewCommentRatio <br>
Avg. patch set count: $record.averagePatchSetCount <br>
Max patch set count: $record.maxPatchSetCount <br><br>

+2 reviews given: $record.reviewCountPlus2 <br>
+1 reviews given: $record.reviewCountPlus1 <br>
-1 reviews given: $record.reviewCountMinus1 <br>
-2 reviews given: $record.reviewCountMinus2 <br>
+2 reviews received: $record.getReceivedReviewsForScore(2) <br>
+1 reviews received: $record.getReceivedReviewsForScore(1) <br>
-1 reviews received: $record.getReceivedReviewsForScore(-1) <br>
-2 reviews received: $record.getReceivedReviewsForScore(-2) <br><br>

Average time in code review: $record.printableAverageTimeInCodeReview
</p>

<h3>Adds them as reviewers ($record.reviewersForOwnCommits.size())</h3>
<p>
#foreach( $identity in $record.myReviewerList )
#set ( $reviewerData = $record.getReviewerDataForOwnCommitFor($identity) )
    <a href="mailto:$identity.email">$identity.email</a> ($reviewerData.addedAsReviewerCount)#listComma( $velocityCount, $record.myReviewerList.size() )
#end
</p>

<h3>They give +2..-2 approvals ($record.reviewersForOwnCommits.size())</h3>
<h4>sorted by number of times added as a reviewer</h4>
<p>
#foreach( $identity in $record.myReviewerList )
#set ( $reviewerData = $record.getReviewerDataForOwnCommitFor($identity) )
    <a href="mailto:$identity.email">$identity.email</a> ($reviewerData.approvalCount)#listComma( $velocityCount, $record.myReviewerList.size() )
#end
</p>

<h3>They add this person as reviewer</h3>
<p>
#foreach( $identity in $record.reviewRequestorList )
#set ( $reviewerData = $record.getReviewRequestorDataFor($identity) )
    <a href="mailto:$identity.email">$identity.email</a> ($reviewerData.addedAsReviewerCount)#listComma( $velocityCount, $record.reviewRequestorList.size() )
#end
</p>

<h3>Review comments per day</h3>
<div id="commentsPerDay">
</div>

#if ($outputRules.listCommitsExceedingPatchSetCount != -1)
<h3>Commits exceeding $outputRules.listCommitsExceedingPatchSetCount patches</h3>
<p>
#set ( $badCommitList = $record.getCommitsWithNPatchSets($outputRules.listCommitsExceedingPatchSetCount) )
#foreach( $commit in $badCommitList )
    <a href="$commit.url">$commit.url</a> ($commit.patchSets.size())#listComma( $velocityCount, $badCommitList.size() )
#end
</p>
#end

<h3>Review comments</h3>
#foreach( $commit in $record.commitsWithWrittenComments )
    <h4><a href="$commit.url">$commit.url</a> (Created: $date.format( "yyyy-MM-dd", $commit.createdOnDate ))</h4>
    <ul>
    #foreach( $patchSet in $commit.patchSets )
        #if ( $patchSet.author != $identity )
            #foreach( $comment in $patchSet.comments )
                #if ($comment.reviewer == $identity)
                    <li><a href="$Gerrit.getUrlForComment($commit, $patchSet, $comment)" alt="$comment.file:$comment.line">$comment.message</a></li>
                #end
            #end
        #end
    #end
    </ul>
#end
</p>

<script>
    var comments = [
#foreach( $commit in $record.commitsWithWrittenComments )
    #foreach( $patchSet in $commit.patchSets )
        #if ( $patchSet.author != $identity )
            #foreach( $comment in $patchSet.comments )
                #if ($comment.reviewer == $identity)
                    {date: "$date.format( "yyyy-MM-dd", $patchSet.createdOnDate )"},
                #end
            #end
        #end
    #end
#end
	];
    var x_domain = [new Date("$date.format( "yyyy-MM-dd", $perPersonData.fromDate )"), new Date("$date.format( "yyyy-MM-dd", $perPersonData.toDate )")];
</script>
<script>
var margin = {top: 20, right: 20, bottom: 30, left: 40};
var width = 800 - margin.left - margin.right;
var height = 400 - margin.top - margin.bottom;

var x = d3.time.scale()
    .domain(x_domain)
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .ticks(d3.time.weeks(x_domain[0], x_domain[1]).length)
    .tickFormat(d3.time.format("%W"))

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(10)
    .tickFormat(d3.format("d"))

var commentsPerDaySvg = d3.select("#commentsPerDay").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

/**
  * Processes the data into the following format:
  * [{date: "2015-06-19", "count": 1},
  *  {date: "2015-08-10", "count": 1},
  *  {date: "2015-08-14", "count": 1},
  *  {date: "2015-08-15", "count": 3},
  *   ...
  * ];
*/
function groupReviewCommentsByDate(comments) {
    var frequencies = comments.reduce(function (previousValue, currentValue, index, array) {
        var date = currentValue.date;
        if (typeof previousValue[date] == 'undefined') {
            previousValue[date] = 1;
        } else {
            previousValue[date] += 1;
        }
        return previousValue;
    }, {});

    var data = Object.keys(frequencies).map(function(date, index) {
        return { "date": new Date(date), "count": frequencies[date] };
    });
    data.sort(function(left, right) {
        return (left.date <  right.date) ? -1 : 1;
    });
    return data;
}

function createFrequencyTable(comments) {
    var data = groupReviewCommentsByDate(comments);

    x.domain(x_domain);
    y.domain([0, d3.max(data, function(d) { return d.count; })]);

    commentsPerDaySvg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    commentsPerDaySvg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Value");

    var totalDaysInDomain = d3.time.days(x_domain[0], x_domain[1]);
    var barWidth = width / totalDaysInDomain.length;
    commentsPerDaySvg.selectAll(".bar")
        .data(data)
      .enter().append("rect")
        .attr("class", "bar")
        .attr("x", function(d) { return x(d.date); })
        .attr("width", barWidth)
        .attr("y", function(d) { return y(d.count); })
        .attr("height", function(d) { return height - y(d.count); })
       .append("svg:title")
        .text(function(d) { return d.date });
};

createFrequencyTable(comments);


</script>
</body>