plugins {
    id 'com.moowork.node' version '0.13'
}

// Use a local npm version to avoid any path problems with e.g. Android Studio.
// Note that npm is not copied into the final output although it's installed
// as a local module.
node {
    npmVersion = '3.10.5'
}

dependencies {
    compile group: 'joda-time', name: 'joda-time', version: '2.8.2'
    compile group: 'com.beust', name: 'jcommander', version: '1.48'
    compile group: 'com.beust', name: 'jcommander', version: '1.48'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.6.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

    compile project(':GerritCommon')
}

jar {
    manifest {
        attributes 'Main-Class': 'com.holmsted.gerrit.GerritStatsMain'
    }

    // Include dependencies in JAR file (see http://stackoverflow.com/a/3450409/639421).
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }

    task cleanupNpmDependenciesAndGeneratedJS(type: Delete) {
        delete 'src/main/resources/res/node_modules'
        delete 'src/main/resources/res/*.js'
    }

    task copyNpmDependenciesToResources(type: Copy) {
        from('node_modules') {
            exclude 'npm/**'
        }
        into 'src/main/resources/res/node_modules'
    }

    task generateResourceFileListing() << {
        assert sourceSets.main.resources.srcDirs.size() == 1;

        java.io.StringWriter filenameListWriter = new StringWriter();

        File baseDir = sourceSets.main.resources.srcDirs.iterator().next();
        String basePathName = baseDir.absolutePath;

        Stack<File> fileStack = new Stack<>();
        fileStack.add(baseDir);
        while (!fileStack.isEmpty()) {
            File file = fileStack.pop();
            if (file.isDirectory()) {
                File[] files = file.listFiles();
                if (files.findIndexOf { f -> f.name =~ /^.*\.ignore$/ } == -1) {
                    fileStack.addAll(files);
                }
            } else if (file.isFile() && !file.isHidden()) {
                String relPath = file.absolutePath.substring(basePathName.length() + 1);
                filenameListWriter.write(relPath + '\n');
            }
        }

        java.io.FileWriter fileWriter = new FileWriter(basePathName + "/resList.js");
        fileWriter.write(filenameListWriter.toString());
        fileWriter.close();
    }

    cleanupNpmDependenciesAndGeneratedJS.dependsOn npmInstall
    // npm_run_* is a magic command whose suffix takes the npm script name.
    npm_run_babel.dependsOn npmInstall
    copyNpmDependenciesToResources.dependsOn npm_run_babel
    copyNpmDependenciesToResources.dependsOn cleanupNpmDependenciesAndGeneratedJS
    generateResourceFileListing.dependsOn copyNpmDependenciesToResources
    processResources.dependsOn generateResourceFileListing
}
