<!DOCTYPE html>
<meta charset="utf-8">
<body>
<script src="res/d3.min.js"></script>
<script src="res/gerritstats.js"></script>
<script src="res/jquery.min.js"></script>
<script src="res/moment.min.js"></script>
<script src="res/numeral.min.js"></script>
<script src="userdata/${record.filenameStem}.js"></script>
<head>
    <link type="text/css" rel="stylesheet" media="screen" href="res/bootstrap.css" />
    <link type="text/css" rel="stylesheet" media="screen" href="res/style.css" />
    <title id="pageTitleHead"></title>
</head>

<h1 id="pageTitle"></h1>
<div class="subtitleH1" id="pageSubtitle"></div>

<h3>Overall</h3>
<p>
<table>
    <tr><th>Commits</th><td id="commitsSize"></td></tr>
    <tr><th>Comments written</th><td id="commentsWritten"></td></tr>
    <tr><th>Comments received</th><td id="commentsReceived"></td></tr>
    <tr><th>Comments / commit</th><td id="receivedCommentRatio"></td></tr>
    <tr><th>Added as reviewer</th><td id="addedAsReviewerTo"></td></tr>
    <tr><td>&nbsp;</td></tr>
    <tr><th>Comments / review request</th><td id="reviewCommentRatio"></td></tr>
    <tr><th>Max patch set count</th><td id="maxPatchSetCount"></td></tr>
</table>

<table>
	<tr><th>+2 reviews given</th><td id="reviewCountGivenPlus2"></td></tr>
	<tr><th>+1 reviews given</th><td id="reviewCountGivenPlus1"></td></tr>
	<tr><th>-1 reviews given</th><td id="reviewCountGivenMinus1"></td></tr>
	<tr><th>-2 reviews given</th><td id="reviewCountGivenMinus2"></td></tr>
	<tr><th>+2 reviews received</th><td id="reviewCountReceivedPlus2"></td></tr>
	<tr><th>+1 reviews received</th><td id="reviewCountReceivedPlus1"></td></tr>
	<tr><th>-1 reviews received</th><td id="reviewCountReceivedMinus1"></td></tr>
	<tr><th>-2 reviews received</th><td id="reviewCountReceivedMinus2"></td></tr>
</table>

<table>
    <tr><th>Average time in code review</th><td id="averageTimeInCodeReview"></td></tr>
</table>
</p>

<h3>Adds them as reviewers (<span id="addsThemAsReviewersCount"></span>)</h3>
<p id="addsThemAsReviewers">
</p>

<h3 class="withSubtitle">They give +2..-2 approvals (<span id="approvalsPerReviewerCount"></span>)</h3>
<div class="subtitleH3">sorted by number of times added as a reviewer</div>
<p id="approvalsPerReviewer">
</p>

<h3>They add this person as reviewer (<span id="theyAddThisPersonAsReviewerCount"></span>)</h3>
<p id="theyAddThisPersonAsReviewer">
</p>

<h3>Review comments per day</h3>
<div id="commentsPerDaySvg">
</div>

<h3>Per-month stats</h3>

<table class="perMonthStats" id="perMonthStats">
</table>

<h3 class="withSubtitle">Commits exceeding <span class="highPatchSetCountThreshold"></span> patches</h3>
<div class="subtitleH3">only includes commits that were reworked over <span class="highPatchSetCountThreshold"></span> times after the initial review, and then submitted.</div>
<p id="highPatchSetCountCommitList">
</p>

<div id="highPatchSetCountCommitsSvg">
</div>

<h3>Review comments</h3>
<p id="reviewComments">
</p>

<script>

function addCommaSeparatedDataToElement(dataArray, elementQuery, dataRenderer) {
    for (var i = 0; i < dataArray.length; ++i) {
        var data = dataArray[i];
        $(elementQuery).append(dataRenderer(data));
        if (i < dataArray.length - 1) {
            $(elementQuery).append(', ');
        }
    }
}

/**
 * Adds a list of reviewers to the element that matches the given element JQuery.
 */
function addReviewerDataToElement(reviewerData, elementJQuery, valueCallback) {
    addCommaSeparatedDataToElement(reviewerData, elementJQuery, function(data) {
        return '<a href="mailto:' + data.identity.email + '">'
             + data.identity.email + '</a> (' + valueCallback(data) + ')'
    });
}

/**
 * Adds all review comments by user to the
 */
function addReviewCommentsByUser(record, elementQuery) {
    var commits = record.getCommitsWithWrittenCommentsSortedByDate();

    for (var i = 0; i < commits.length; ++i) {
        var commitAndComments = commits[i];
        var commit = commitAndComments.commit;

        var commitCreatedDate = moment(commit.createdOnDate);
        $(elementQuery).append('<h4><a href="' + commit.url + '">' + commit.url + '</a> (Created: '
            +  commitCreatedDate.format("YYYY-MM-DD") + ')</h4><ul></ul>');

        commit.patchSets.forEach(function(patchSet) {
            // ignore self-reviews and replies
            if (patchSet.author.email == record.identity.email) {
                return;
            }

            var comments = patchSet.comments;
            comments.forEach(function(comment) {
                if (comment.reviewer.email != record.identity.email) {
                    return;
                }

                var urlForComment = getGerritUrlForComment(commit, patchSet, comment)
                var altText = comment.file + ':' + comment.line;
                $(elementQuery + " ul").last().append('<li><a href="' + urlForComment + '" alt="' + altText + '">'
                    + escapeHtml(comment.message) + '</a></li>');
            });
        });
    }
}

function addHighPatchSetCommits(exceedingCommits) {
    addCommaSeparatedDataToElement(exceedingCommits, '#highPatchSetCountCommitList', function(commit) {
        return '<a href="' + commit.url + '">' + commit.url + '</a> ('
            + userdataScope.getPatchSetCountForKind(commit, 'REWORK') + ')';
    });
}

function addPerMonthStatsYearHeader(year) {
    $('#perMonthStats').append('<tr><th colspan="13" class="monthlyCommitYearTitle">' + year + '</th></tr>\
        <tr><th></th>\
            <th>Jan</th>\
            <th>Feb</th>\
            <th>Mar</th>\
            <th>Apr</th>\
            <th>May</th>\
            <th>Jun</th>\
            <th>Jul</th>\
            <th>Aug</th>\
            <th>Sep</th>\
            <th>Oct</th>\
            <th>Nov</th>\
            <th>Dec</th>\
        </tr>\
        <tr class="commitsSection">\
            <th>Commits</th>\
            <!-- content is added here -->\
        </tr>\
        <tr class="commentsSection">\
            <th>Comments</th>\
            <!-- content is added here -->\
        </tr>\
        <tr class="commitsMoMSection">\
            <th>Commits MoM %</th>\
            <!-- content is added here -->\
        </tr>\
        <tr class="commitsQoQSection">\
            <th>Commits QoQ %</th>\
            <!-- content is added here -->\
        </tr>\
        <tr class="commentsMoMSection">\
            <th>Comments MoM %</th>\
            <!-- content is added here -->\
        </tr>\
        <tr class="commentsQoQSection">\
            <th>Comments QoQ %</th>\
            <!-- content is added here -->\
        </tr>\
    ');
}

function addPerMonthStats(record) {
    var commitTable = record.datedCommitTable;
    var commentTable = record.datedCommentTable;

    var years = record.datedCommitTable.getActiveYears();
    years.forEach(function(year) {
        addPerMonthStatsYearHeader(year);
        for (var month = 1; month <= 12; ++month) {
            var commitCount = commitTable.getPrintableMonthlyItemCount(year, month);
            var commitsMoMChange = commitTable.getDisplayableMonthOnMonthChange(year, month);
            var commitsQoQChange = commitTable.getDisplayableQuarterOnQuarterChange(year, month);

            var commentCount = commentTable.getPrintableMonthlyItemCount(year, month);
            var commentsMoMChange = commentTable.getDisplayableMonthOnMonthChange(year, month);
            var commentsQoQChange = commentTable.getDisplayableQuarterOnQuarterChange(year, month);

            $('#perMonthStats .commitsSection').last().append('<td>' + commitCount + '</td>');
            $('#perMonthStats .commentsSection').last().append('<td>' + commentCount + '</td>');
            $('#perMonthStats .commitsMoMSection').last().append('<td>' + commitsMoMChange + '</td>');
            $('#perMonthStats .commitsQoQSection').last().append('<td>' + commitsQoQChange + '</td>');
            $('#perMonthStats .commentsMoMSection').last().append('<td>' + commentsMoMChange + '</td>');
            $('#perMonthStats .commentsQoQSection').last().append('<td>' + commentsQoQChange + '</td>');
        }
    });
}

function updateViewFromUserdata() {
    var record = userdata['${record.filenameStem}'];
    userdataScope.initializeRecord(record);

    $('#pageTitleHead').html("GerritStats: " + record.printableName());
    $('#pageTitle').html(record.printableName());
    $('#pageSubtitle').html(record.identity.email);
    $('#commitsSize').html(record.commits.length);
    $('#commentsWritten').html(record.getAllCommentsByUser());
    $('#commentsReceived').html(record.commentsReceived.length);
    $('#receivedCommentRatio').html(record.getReceivedCommentRatio().toFixed(outputConfig.decimalPrecision));
    $('#addedAsReviewerTo').html(record.addedAsReviewerTo.length);
    $('#reviewCommentRatio').html((record.commentsWritten.length / record.addedAsReviewerTo.length)
                                    .toFixed(outputConfig.decimalPrecision));
    $('#maxPatchSetCount').html(record.getMaxPatchSetCount());
    $('#reviewCountGivenPlus2').html(record.reviewCountPlus2);
    $('#reviewCountGivenPlus1').html(record.reviewCountPlus1);
    $('#reviewCountGivenMinus1').html(record.reviewCountMinus1);
    $('#reviewCountGivenMinus2').html(record.reviewCountMinus2);
    $('#reviewCountReceivedPlus2').html(record.getReceivedReviewsForScore(2));
    $('#reviewCountReceivedPlus1').html(record.getReceivedReviewsForScore(1));
    $('#reviewCountReceivedMinus1').html(record.getReceivedReviewsForScore(-1));
    $('#reviewCountReceivedMinus2').html(record.getReceivedReviewsForScore(-2));
    $('#averageTimeInCodeReview').html(formatPrintableDuration(record.averageTimeInCodeReview));

    addReviewerDataToElement(record.getReviewerDataForOwnCommits(), '#addsThemAsReviewers', function(data) {
        return data.approvalData.addedAsReviewerCount;
    });
    // Note: could also use getReviewerApprovalDataForOwnCommits() for sorting.
    addReviewerDataToElement(record.getReviewerDataForOwnCommits(), '#approvalsPerReviewer', function(data) {
        return data.approvalData.approvalCount;
    });
    $('#addsThemAsReviewersCount').html(record.reviewersForOwnCommits.length);
    $('#approvalsPerReviewerCount').html(record.reviewersForOwnCommits.length);

    addReviewerDataToElement(record.getReviewRequestors(), '#theyAddThisPersonAsReviewer', function(data) {
        return data.approvalData.addedAsReviewerCount;
    });
    $('#theyAddThisPersonAsReviewerCount').html(record.reviewRequestors.length);

    addReviewCommentsByUser(record, '#reviewComments')

    $('.highPatchSetCountThreshold').html(outputConfig.highPatchSetCountThreshold.toString());

    addHighPatchSetCommits(record.getCommitsWithHighPatchSetCount());
    addPerMonthStats(record);

    var xDomain = [new Date("$date.format( "yyyy-MM-dd", $perPersonData.fromDate )"),
                   new Date("$date.format( "yyyy-MM-dd", $perPersonData.toDate )")];
    createFrequencyTable("#commentsPerDaySvg", xDomain, groupReviewCommentsByDate(record.getReviewCommentDates()));
    createFrequencyTable("#highPatchSetCountCommitsSvg", xDomain, record.getDatesForCommitsWithHighPatchSetCount());
}

/**
  * Processes the data into the following format:
  * [{date: "2015-06-19", "count": 1},
  *  {date: "2015-08-10", "count": 1},
  *  {date: "2015-08-14", "count": 1},
  *  {date: "2015-08-15", "count": 3},
  *   ...
  * ];
*/
function groupReviewCommentsByDate(comments) {
    var frequencies = comments.reduce(function (previousValue, currentValue, index, array) {
        var date = currentValue.date;
        if (typeof previousValue[date] == 'undefined') {
            previousValue[date] = 1;
        } else {
            previousValue[date] += 1;
        }
        return previousValue;
    }, {});

    var data = Object.keys(frequencies).map(function(date, index) {
        return { "date": new Date(date), "count": frequencies[date] };
    });
    data.sort(function(left, right) {
        return (left.date <  right.date) ? -1 : 1;
    });
    return data;
}

function createFrequencyTable(svgId, x_domain, data) {
    var margin = {top: 20, right: 20, bottom: 30, left: 40};
    var width = 800 - margin.left - margin.right;
    var height = 400 - margin.top - margin.bottom;

    var x = d3.time.scale()
        .domain(x_domain)
        .range([0, width]);

    var y = d3.scale.linear()
        .range([height, 0]);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom")
        .ticks(d3.time.weeks(x_domain[0], x_domain[1]).length)
        .tickFormat(d3.time.format("%W"))

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
        .ticks(10)
        .tickFormat(d3.format("d"))

    var svg = d3.select(svgId).append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    x.domain(x_domain);
    y.domain([0, d3.max(data, function(d) { return d.count; })]);

    svg.append("g")
      .attr("class", "x commentChartAxis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    svg.append("g")
      .attr("class", "y commentChartAxis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Value");

    var totalDaysInDomain = d3.time.days(x_domain[0], x_domain[1]);
    var barWidth = width / totalDaysInDomain.length;
    svg.selectAll(".bar")
        .data(data)
      .enter().append("rect")
        .attr("class", "commentChartBar")
        .attr("x", function(d) { return x(d.date); })
        .attr("width", barWidth)
        .attr("y", function(d) { return y(d.count); })
        .attr("height", function(d) { return height - y(d.count); })
       .append("svg:title")
        .text(function(d) { return d.date });
}

updateViewFromUserdata();

</script>
</body>