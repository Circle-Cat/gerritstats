#parse( "templates/macros.vm" )
<!DOCTYPE html>
<meta charset="utf-8">
<body>
<script src="res/d3.min.js"></script>
<head>
    <link type="text/css" rel="stylesheet" media="screen" href="res/style.css" />
    <title>GerritStats: $identity.name ($identity.username)</title>
</head>

<h1>#printableName( $identity ) #wrapWithParenthesesIfNotEmpty( $identity.username )</h1>
<div class="subtitleH1">$identity.email</div>

<h3>Overall</h3>
<p>
<table>
    <tr><th>Commits</th><td>$record.commits.size()</td></tr>
    <tr><th>Comments written</th><td>$record.allCommentsWritten.size()</td></tr>
    <tr><th>Comments received</th><td>$record.allCommentsReceived.size()</td></tr>
    <tr><th>Comments / commit</th><td>$record.receivedCommentRatio</td></tr>
    <tr><th>Added as reviewer</th><td>$record.addedAsReviewerTo.size()</td></tr>
    <tr><td>&nbsp;</td></tr>
    <tr><th>Review comment ratio</th><td>$record.reviewCommentRatio</td></tr>
    <tr><th>Max patch set count</th><td>$record.maxPatchSetCount</td></tr>
</table>

<table>
	<tr><th>+2 reviews given</th><td>$record.reviewCountPlus2</td></tr>
	<tr><th>+1 reviews given</th><td>$record.reviewCountPlus1</td></tr>
	<tr><th>-1 reviews given</th><td>$record.reviewCountMinus1</td></tr>
	<tr><th>-2 reviews given</th><td>$record.reviewCountMinus2</td></tr>
	<tr><th>+2 reviews received</th><td>$record.getReceivedReviewsForScore(2)</td></tr>
	<tr><th>+1 reviews received</th><td>$record.getReceivedReviewsForScore(1)</td></tr>
	<tr><th>-1 reviews received</th><td>$record.getReceivedReviewsForScore(-1)</td></tr>
	<tr><th>-2 reviews received</th><td>$record.getReceivedReviewsForScore(-2)</td></tr>
</table>

<table>
    <tr><th>Average time in code review</th><td>$record.printableAverageTimeInCodeReview</td></tr>
</table>
</p>

<h3>Adds them as reviewers ($record.reviewersForOwnCommits.size())</h3>
<p>
#foreach( $identity in $record.myReviewerList )
#set ( $reviewerData = $record.getReviewerDataForOwnCommitFor($identity) )
    #identityHref( $identity ) ($reviewerData.addedAsReviewerCount)#listComma( $velocityCount, $record.myReviewerList.size() )
#end
</p>

<h3 class="withSubtitle">They give +2..-2 approvals ($record.reviewersForOwnCommits.size())</h3>
<div class="subtitleH3">sorted by number of times added as a reviewer</div>
<p>
#foreach( $identity in $record.myReviewerList )
#set ( $reviewerData = $record.getReviewerDataForOwnCommitFor($identity) )
    #identityHref( $identity ) ($reviewerData.approvalCount)#listComma( $velocityCount, $record.myReviewerList.size() )
#end
</p>

<h3>They add this person as reviewer</h3>
<p>
#foreach( $identity in $record.reviewRequestorList )
#set ( $reviewerData = $record.getReviewRequestorDataFor($identity) )
    #identityHref( $identity ) ($reviewerData.addedAsReviewerCount)#listComma( $velocityCount, $record.reviewRequestorList.size() )
#end
</p>

<h3>Review comments per day</h3>
<div id="commentsPerDaySvg">
</div>

<h3>Per-month stats</h3>

<table class="perMonthStats">
#foreach( $year in $record.commits.yearRange )

	<tr><th colspan="13" class="monthlyCommitYearTitle">$year</th></tr>
    <tr><th></th>
        <th>Jan</th>
        <th>Feb</th>
        <th>Mar</th>
        <th>Apr</th>
        <th>May</th>
        <th>Jun</th>
        <th>Jul</th>
        <th>Aug</th>
        <th>Sep</th>
        <th>Oct</th>
        <th>Nov</th>
        <th>Dec</th>
    </tr>
    <tr>
        <th>Commits</th>
#foreach( $month in $record.allCommentsWritten.monthsInYear )
        <td>$record.commits.getPrintableMonthlyItemCount($year, $month)</td>
#end
    </tr>
	<tr>
	    <th>Comments</th>
#foreach( $month in $record.allCommentsWritten.monthsInYear )
        <td>$record.allCommentsWritten.getPrintableMonthlyItemCount($year, $month)</td>
#end
	</tr>
	<tr>
	    <th>Commits MoM %</th>
#foreach( $month in $record.allCommentsWritten.monthsInYear )
        <td>$record.commits.getDisplayableMonthOnMonthChange($year, $month)</td>
#end
	</tr>
    <tr>
	    <th>Commits QoQ %</th>
#foreach( $month in $record.allCommentsWritten.monthsInYear )
        <td>$record.commits.getDisplayableQuarterOnQuarterChange($year, $month)</td>
#end
	</tr>
    <tr>
        <th>Comments MoM %</th>
#foreach( $month in $record.allCommentsWritten.monthsInYear )
        <td>$record.allCommentsWritten.getDisplayableMonthOnMonthChange($year, $month)</td>
#end
	</tr>
	<tr>
	    <th>Comments QoQ %</th>
#foreach( $month in $record.allCommentsWritten.monthsInYear )
        <td>$record.allCommentsWritten.getDisplayableQuarterOnQuarterChange($year, $month)</td>
#end
	</tr>
#end
</table>

#if ($outputRules.commitPatchSetCountThreshold != -1)
<h3 class="withSubtitle">Commits exceeding $outputRules.commitPatchSetCountThreshold patches</h3>
<div class="subtitleH3">only includes commits that were reworked over $outputRules.commitPatchSetCountThreshold times after the initial review, and then submitted.</div>
<p>
#set ( $badCommitList = $record.getCommitsWithNPatchSets($outputRules.commitPatchSetCountThreshold) )
#foreach( $commit in $badCommitList )
    <a href="$commit.url">$commit.url</a> ($commit.getPatchSetCountForKind("REWORK"))#listComma( $velocityCount, $badCommitList.size() )
#end
</p>

<div id="badCommitsSvg">
</div>

#end

<h3>Review comments</h3>
#foreach( $commit in $record.commitsWithWrittenComments )
    <h4><a href="$commit.url">$commit.url</a> (Created: $date.format( "yyyy-MM-dd", $commit.createdOnDate ))</h4>
    <ul>
    #foreach( $patchSet in $commit.patchSets )
        #if ( $patchSet.author != $identity )
            #foreach( $comment in $patchSet.comments )
                #if ($comment.reviewer == $identity)
                    <li><a href="$Gerrit.getUrlForComment($commit, $patchSet, $comment)" alt="$comment.file:$comment.line">$comment.message</a></li>
                #end
            #end
        #end
    #end
    </ul>
#end
</p>

<script>
    var comments = [
#foreach( $commit in $record.commitsWithWrittenComments )
    #foreach( $patchSet in $commit.patchSets )
        #if ( $patchSet.author != $identity )
            #foreach( $comment in $patchSet.comments )
                #if ($comment.reviewer == $identity)
                    {date: "$date.format( "yyyy-MM-dd", $patchSet.createdOnDate )"},
                #end
            #end
        #end
    #end
#end
	];

#set ( $badCommitList = $record.getCommitsWithNPatchSets($outputRules.commitPatchSetCountThreshold) )
    var badCommits = [
#foreach( $commit in $badCommitList )
    {date: new Date("$date.format( "yyyy-MM-dd", $commit.createdOnDate )"), count: $commit.getPatchSetCountForKind("REWORK")},
#end
	];
</script>
<script>

/**
  * Processes the data into the following format:
  * [{date: "2015-06-19", "count": 1},
  *  {date: "2015-08-10", "count": 1},
  *  {date: "2015-08-14", "count": 1},
  *  {date: "2015-08-15", "count": 3},
  *   ...
  * ];
*/
function groupReviewCommentsByDate(comments) {
    var frequencies = comments.reduce(function (previousValue, currentValue, index, array) {
        var date = currentValue.date;
        if (typeof previousValue[date] == 'undefined') {
            previousValue[date] = 1;
        } else {
            previousValue[date] += 1;
        }
        return previousValue;
    }, {});

    var data = Object.keys(frequencies).map(function(date, index) {
        return { "date": new Date(date), "count": frequencies[date] };
    });
    data.sort(function(left, right) {
        return (left.date <  right.date) ? -1 : 1;
    });
    return data;
}

function createFrequencyTable(svgId, x_domain, data) {
    var margin = {top: 20, right: 20, bottom: 30, left: 40};
    var width = 800 - margin.left - margin.right;
    var height = 400 - margin.top - margin.bottom;

    var x = d3.time.scale()
        .domain(x_domain)
        .range([0, width]);

    var y = d3.scale.linear()
        .range([height, 0]);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom")
        .ticks(d3.time.weeks(x_domain[0], x_domain[1]).length)
        .tickFormat(d3.time.format("%W"))

    var yAxis = d3.svg.axis()
        .scale(y)
        .orient("left")
        .ticks(10)
        .tickFormat(d3.format("d"))

    var svg = d3.select(svgId).append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
    .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    x.domain(x_domain);
    y.domain([0, d3.max(data, function(d) { return d.count; })]);

    svg.append("g")
      .attr("class", "x commentChartAxis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

    svg.append("g")
      .attr("class", "y commentChartAxis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Value");

    var totalDaysInDomain = d3.time.days(x_domain[0], x_domain[1]);
    var barWidth = width / totalDaysInDomain.length;
    svg.selectAll(".bar")
        .data(data)
      .enter().append("rect")
        .attr("class", "commentChartBar")
        .attr("x", function(d) { return x(d.date); })
        .attr("width", barWidth)
        .attr("y", function(d) { return y(d.count); })
        .attr("height", function(d) { return height - y(d.count); })
       .append("svg:title")
        .text(function(d) { return d.date });
};

var xDomain = [new Date("$date.format( "yyyy-MM-dd", $perPersonData.fromDate )"),
               new Date("$date.format( "yyyy-MM-dd", $perPersonData.toDate )")];
createFrequencyTable("#commentsPerDaySvg", xDomain, groupReviewCommentsByDate(comments));

createFrequencyTable("#badCommitsSvg", xDomain, badCommits);

</script>
</body>